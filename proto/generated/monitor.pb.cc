// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: monitor.proto

#include "monitor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_cpu_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CpuInfo_cpu_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cpu_5fload_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CpuLoad_cpu_5fload_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_meminfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemInfo_meminfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_monitor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_MonitorInfo_monitor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cpu_5fsoftirqs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SoftIrqs_cpu_5fsoftirqs_2eproto;
namespace monitor {
namespace proto {
class MonitorInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MonitorInfo> _instance;
} _MonitorInfo_default_instance_;
class AllMonitorInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllMonitorInfo> _instance;
} _AllMonitorInfo_default_instance_;
}  // namespace proto
}  // namespace monitor
static void InitDefaultsscc_info_AllMonitorInfo_monitor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::monitor::proto::_AllMonitorInfo_default_instance_;
    new (ptr) ::monitor::proto::AllMonitorInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AllMonitorInfo_monitor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AllMonitorInfo_monitor_2eproto}, {
      &scc_info_MonitorInfo_monitor_2eproto.base,}};

static void InitDefaultsscc_info_MonitorInfo_monitor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::monitor::proto::_MonitorInfo_default_instance_;
    new (ptr) ::monitor::proto::MonitorInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_MonitorInfo_monitor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_MonitorInfo_monitor_2eproto}, {
      &scc_info_CpuInfo_cpu_5finfo_2eproto.base,
      &scc_info_CpuLoad_cpu_5fload_2eproto.base,
      &scc_info_SoftIrqs_cpu_5fsoftirqs_2eproto.base,
      &scc_info_MemInfo_meminfo_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_monitor_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_monitor_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_monitor_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_monitor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::monitor::proto::MonitorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::monitor::proto::MonitorInfo, name_),
  PROTOBUF_FIELD_OFFSET(::monitor::proto::MonitorInfo, cpu_info_),
  PROTOBUF_FIELD_OFFSET(::monitor::proto::MonitorInfo, cpu_load_),
  PROTOBUF_FIELD_OFFSET(::monitor::proto::MonitorInfo, soft_irqs_),
  PROTOBUF_FIELD_OFFSET(::monitor::proto::MonitorInfo, meminfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::monitor::proto::AllMonitorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::monitor::proto::AllMonitorInfo, monitor_infos_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::monitor::proto::MonitorInfo)},
  { 10, -1, sizeof(::monitor::proto::AllMonitorInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::monitor::proto::_MonitorInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::monitor::proto::_AllMonitorInfo_default_instance_),
};

const char descriptor_table_protodef_monitor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmonitor.proto\022\rmonitor.proto\032\033google/p"
  "rotobuf/empty.proto\032\016cpu_info.proto\032\016cpu"
  "_load.proto\032\022cpu_softirqs.proto\032\rmeminfo"
  ".proto\"\304\001\n\013MonitorInfo\022\014\n\004name\030\001 \001(\t\022(\n\010"
  "cpu_info\030\002 \003(\0132\026.monitor.proto.CpuInfo\022("
  "\n\010cpu_load\030\003 \001(\0132\026.monitor.proto.CpuLoad"
  "\022*\n\tsoft_irqs\030\004 \003(\0132\027.monitor.proto.Soft"
  "Irqs\022\'\n\007meminfo\030\005 \001(\0132\026.monitor.proto.Me"
  "mInfo\"C\n\016AllMonitorInfo\0221\n\rmonitor_infos"
  "\030\001 \003(\0132\032.monitor.proto.MonitorInfo2\351\001\n\013G"
  "rpcManager\022F\n\016SetMonitorInfo\022\032.monitor.p"
  "roto.MonitorInfo\032\026.google.protobuf.Empty"
  "\"\000\022F\n\016GetMonitorInfo\022\026.google.protobuf.E"
  "mpty\032\032.monitor.proto.MonitorInfo\"\000\022J\n\021Ge"
  "tAllMonitorInfo\022\026.google.protobuf.Empty\032"
  "\035.monitor.proto.AllMonitorInfob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_monitor_2eproto_deps[5] = {
  &::descriptor_table_cpu_5finfo_2eproto,
  &::descriptor_table_cpu_5fload_2eproto,
  &::descriptor_table_cpu_5fsoftirqs_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_meminfo_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_monitor_2eproto_sccs[2] = {
  &scc_info_AllMonitorInfo_monitor_2eproto.base,
  &scc_info_MonitorInfo_monitor_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_monitor_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_monitor_2eproto = {
  false, false, descriptor_table_protodef_monitor_2eproto, "monitor.proto", 638,
  &descriptor_table_monitor_2eproto_once, descriptor_table_monitor_2eproto_sccs, descriptor_table_monitor_2eproto_deps, 2, 5,
  schemas, file_default_instances, TableStruct_monitor_2eproto::offsets,
  file_level_metadata_monitor_2eproto, 2, file_level_enum_descriptors_monitor_2eproto, file_level_service_descriptors_monitor_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_monitor_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_monitor_2eproto)), true);
namespace monitor {
namespace proto {

// ===================================================================

class MonitorInfo::_Internal {
 public:
  static const ::monitor::proto::CpuLoad& cpu_load(const MonitorInfo* msg);
  static const ::monitor::proto::MemInfo& meminfo(const MonitorInfo* msg);
};

const ::monitor::proto::CpuLoad&
MonitorInfo::_Internal::cpu_load(const MonitorInfo* msg) {
  return *msg->cpu_load_;
}
const ::monitor::proto::MemInfo&
MonitorInfo::_Internal::meminfo(const MonitorInfo* msg) {
  return *msg->meminfo_;
}
void MonitorInfo::clear_cpu_info() {
  cpu_info_.Clear();
}
void MonitorInfo::clear_cpu_load() {
  if (GetArena() == nullptr && cpu_load_ != nullptr) {
    delete cpu_load_;
  }
  cpu_load_ = nullptr;
}
void MonitorInfo::clear_soft_irqs() {
  soft_irqs_.Clear();
}
void MonitorInfo::clear_meminfo() {
  if (GetArena() == nullptr && meminfo_ != nullptr) {
    delete meminfo_;
  }
  meminfo_ = nullptr;
}
MonitorInfo::MonitorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cpu_info_(arena),
  soft_irqs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:monitor.proto.MonitorInfo)
}
MonitorInfo::MonitorInfo(const MonitorInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cpu_info_(from.cpu_info_),
      soft_irqs_(from.soft_irqs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_cpu_load()) {
    cpu_load_ = new ::monitor::proto::CpuLoad(*from.cpu_load_);
  } else {
    cpu_load_ = nullptr;
  }
  if (from._internal_has_meminfo()) {
    meminfo_ = new ::monitor::proto::MemInfo(*from.meminfo_);
  } else {
    meminfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:monitor.proto.MonitorInfo)
}

void MonitorInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MonitorInfo_monitor_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&cpu_load_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&meminfo_) -
      reinterpret_cast<char*>(&cpu_load_)) + sizeof(meminfo_));
}

MonitorInfo::~MonitorInfo() {
  // @@protoc_insertion_point(destructor:monitor.proto.MonitorInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MonitorInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cpu_load_;
  if (this != internal_default_instance()) delete meminfo_;
}

void MonitorInfo::ArenaDtor(void* object) {
  MonitorInfo* _this = reinterpret_cast< MonitorInfo* >(object);
  (void)_this;
}
void MonitorInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MonitorInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MonitorInfo& MonitorInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MonitorInfo_monitor_2eproto.base);
  return *internal_default_instance();
}


void MonitorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:monitor.proto.MonitorInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cpu_info_.Clear();
  soft_irqs_.Clear();
  name_.ClearToEmpty();
  if (GetArena() == nullptr && cpu_load_ != nullptr) {
    delete cpu_load_;
  }
  cpu_load_ = nullptr;
  if (GetArena() == nullptr && meminfo_ != nullptr) {
    delete meminfo_;
  }
  meminfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MonitorInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "monitor.proto.MonitorInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .monitor.proto.CpuInfo cpu_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cpu_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .monitor.proto.CpuLoad cpu_load = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpu_load(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .monitor.proto.SoftIrqs soft_irqs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_soft_irqs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .monitor.proto.MemInfo meminfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_meminfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MonitorInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:monitor.proto.MonitorInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "monitor.proto.MonitorInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .monitor.proto.CpuInfo cpu_info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cpu_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_cpu_info(i), target, stream);
  }

  // .monitor.proto.CpuLoad cpu_load = 3;
  if (this->has_cpu_load()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cpu_load(this), target, stream);
  }

  // repeated .monitor.proto.SoftIrqs soft_irqs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_soft_irqs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_soft_irqs(i), target, stream);
  }

  // .monitor.proto.MemInfo meminfo = 5;
  if (this->has_meminfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::meminfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:monitor.proto.MonitorInfo)
  return target;
}

size_t MonitorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:monitor.proto.MonitorInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .monitor.proto.CpuInfo cpu_info = 2;
  total_size += 1UL * this->_internal_cpu_info_size();
  for (const auto& msg : this->cpu_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .monitor.proto.SoftIrqs soft_irqs = 4;
  total_size += 1UL * this->_internal_soft_irqs_size();
  for (const auto& msg : this->soft_irqs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .monitor.proto.CpuLoad cpu_load = 3;
  if (this->has_cpu_load()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cpu_load_);
  }

  // .monitor.proto.MemInfo meminfo = 5;
  if (this->has_meminfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meminfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MonitorInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:monitor.proto.MonitorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MonitorInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MonitorInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:monitor.proto.MonitorInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:monitor.proto.MonitorInfo)
    MergeFrom(*source);
  }
}

void MonitorInfo::MergeFrom(const MonitorInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:monitor.proto.MonitorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cpu_info_.MergeFrom(from.cpu_info_);
  soft_irqs_.MergeFrom(from.soft_irqs_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_cpu_load()) {
    _internal_mutable_cpu_load()->::monitor::proto::CpuLoad::MergeFrom(from._internal_cpu_load());
  }
  if (from.has_meminfo()) {
    _internal_mutable_meminfo()->::monitor::proto::MemInfo::MergeFrom(from._internal_meminfo());
  }
}

void MonitorInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:monitor.proto.MonitorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonitorInfo::CopyFrom(const MonitorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:monitor.proto.MonitorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorInfo::IsInitialized() const {
  return true;
}

void MonitorInfo::InternalSwap(MonitorInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cpu_info_.InternalSwap(&other->cpu_info_);
  soft_irqs_.InternalSwap(&other->soft_irqs_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MonitorInfo, meminfo_)
      + sizeof(MonitorInfo::meminfo_)
      - PROTOBUF_FIELD_OFFSET(MonitorInfo, cpu_load_)>(
          reinterpret_cast<char*>(&cpu_load_),
          reinterpret_cast<char*>(&other->cpu_load_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MonitorInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AllMonitorInfo::_Internal {
 public:
};

AllMonitorInfo::AllMonitorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  monitor_infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:monitor.proto.AllMonitorInfo)
}
AllMonitorInfo::AllMonitorInfo(const AllMonitorInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      monitor_infos_(from.monitor_infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:monitor.proto.AllMonitorInfo)
}

void AllMonitorInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AllMonitorInfo_monitor_2eproto.base);
}

AllMonitorInfo::~AllMonitorInfo() {
  // @@protoc_insertion_point(destructor:monitor.proto.AllMonitorInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AllMonitorInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AllMonitorInfo::ArenaDtor(void* object) {
  AllMonitorInfo* _this = reinterpret_cast< AllMonitorInfo* >(object);
  (void)_this;
}
void AllMonitorInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllMonitorInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllMonitorInfo& AllMonitorInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllMonitorInfo_monitor_2eproto.base);
  return *internal_default_instance();
}


void AllMonitorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:monitor.proto.AllMonitorInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  monitor_infos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllMonitorInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .monitor.proto.MonitorInfo monitor_infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_monitor_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllMonitorInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:monitor.proto.AllMonitorInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .monitor.proto.MonitorInfo monitor_infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_monitor_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_monitor_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:monitor.proto.AllMonitorInfo)
  return target;
}

size_t AllMonitorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:monitor.proto.AllMonitorInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .monitor.proto.MonitorInfo monitor_infos = 1;
  total_size += 1UL * this->_internal_monitor_infos_size();
  for (const auto& msg : this->monitor_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllMonitorInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:monitor.proto.AllMonitorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AllMonitorInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllMonitorInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:monitor.proto.AllMonitorInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:monitor.proto.AllMonitorInfo)
    MergeFrom(*source);
  }
}

void AllMonitorInfo::MergeFrom(const AllMonitorInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:monitor.proto.AllMonitorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  monitor_infos_.MergeFrom(from.monitor_infos_);
}

void AllMonitorInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:monitor.proto.AllMonitorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllMonitorInfo::CopyFrom(const AllMonitorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:monitor.proto.AllMonitorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllMonitorInfo::IsInitialized() const {
  return true;
}

void AllMonitorInfo::InternalSwap(AllMonitorInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  monitor_infos_.InternalSwap(&other->monitor_infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllMonitorInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace monitor
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::monitor::proto::MonitorInfo* Arena::CreateMaybeMessage< ::monitor::proto::MonitorInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::monitor::proto::MonitorInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::monitor::proto::AllMonitorInfo* Arena::CreateMaybeMessage< ::monitor::proto::AllMonitorInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::monitor::proto::AllMonitorInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
